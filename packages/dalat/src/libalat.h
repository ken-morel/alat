/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package libalat */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "async_pair.go"

#include "async_pair.h"

#line 1 "cgo-generated-wrapper"




#line 4 "libalat.go"

#include <stdlib.h>

#line 1 "cgo-generated-wrapper"




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int register_async_pair_request_callback(int handle, async_pair_request_callback callback);
extern int submit_pair_response(int handle, char* requestID_C, _Bool accepted, char* reason_C);
extern char* default_app_config(void);
extern char* default_service_config(void);
extern char* get_error(void);
extern char* get_instances(void);
extern int create_instance(char* configPathC, char* appConfigC, char* serviceConfigC);
extern int start_instance(int handle);
extern void stop_instance(int handle);
extern GoInt get_port(int handle);
extern void destroy_instance(int handle);
extern char* get_node_status_json(int handle);
extern void free_string(char* s);
extern char* request_pair_found_device(int handleC, char* deviceIdC);
extern char* get_app_config_json(int handle);
extern int set_app_config_json(int handle, char* settingsJSON);
extern char* get_service_config_json(int handle);
extern int set_service_config_json(int handle, char* settingsJSON);
extern char* get_found_devices_json(int handle);
extern char* get_paired_devices_json(int handle);
extern char* get_connected_devices_json(int handle);
extern char* get_alat_device_colors_json(void);

#ifdef __cplusplus
}
#endif
