// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v3.21.12
// source: pair.proto

package pbuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_Mobile  DeviceType = 0
	DeviceType_Desktop DeviceType = 1
	DeviceType_TV      DeviceType = 2
	DeviceType_Unknown DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "Mobile",
		1: "Desktop",
		2: "TV",
		3: "Unknown",
	}
	DeviceType_value = map[string]int32{
		"Mobile":  0,
		"Desktop": 1,
		"TV":      2,
		"Unknown": 3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pair_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_pair_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{0}
}

type Color struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R             uint32                 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	G             uint32                 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	B             uint32                 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Color) Reset() {
	*x = Color{}
	mi := &file_pair_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{0}
}

func (x *Color) GetR() uint32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *Color) GetG() uint32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *Color) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          DeviceType             `protobuf:"varint,3,opt,name=type,proto3,enum=pbuf.DeviceType" json:"type,omitempty"`
	Color         *Color                 `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	mi := &file_pair_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceInfo) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_Mobile
}

func (x *DeviceInfo) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type PairingSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Initiator     *DeviceInfo            `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Responder     *DeviceInfo            `protobuf:"bytes,2,opt,name=responder,proto3" json:"responder,omitempty"`
	Token         []byte                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PairingSession) Reset() {
	*x = PairingSession{}
	mi := &file_pair_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairingSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairingSession) ProtoMessage() {}

func (x *PairingSession) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairingSession.ProtoReflect.Descriptor instead.
func (*PairingSession) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{2}
}

func (x *PairingSession) GetInitiator() *DeviceInfo {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *PairingSession) GetResponder() *DeviceInfo {
	if x != nil {
		return x.Responder
	}
	return nil
}

func (x *PairingSession) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type PairedDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificate   []byte                 `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Token         []byte                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PairedDevice) Reset() {
	*x = PairedDevice{}
	mi := &file_pair_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairedDevice) ProtoMessage() {}

func (x *PairedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairedDevice.ProtoReflect.Descriptor instead.
func (*PairedDevice) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{3}
}

func (x *PairedDevice) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *PairedDevice) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type PairRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Info          *DeviceInfo            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PairRequest) Reset() {
	*x = PairRequest{}
	mi := &file_pair_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairRequest) ProtoMessage() {}

func (x *PairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairRequest.ProtoReflect.Descriptor instead.
func (*PairRequest) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{4}
}

func (x *PairRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PairRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PairResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Info          *DeviceInfo            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PairResponse) Reset() {
	*x = PairResponse{}
	mi := &file_pair_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairResponse) ProtoMessage() {}

func (x *PairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairResponse.ProtoReflect.Descriptor instead.
func (*PairResponse) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{5}
}

func (x *PairResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PairResponse) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_pair_proto protoreflect.FileDescriptor

const file_pair_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"pair.proto\x12\x04pbuf\"1\n" +
	"\x05Color\x12\f\n" +
	"\x01r\x18\x01 \x01(\rR\x01r\x12\f\n" +
	"\x01g\x18\x02 \x01(\rR\x01g\x12\f\n" +
	"\x01b\x18\x03 \x01(\rR\x01b\"y\n" +
	"\n" +
	"DeviceInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12$\n" +
	"\x04type\x18\x03 \x01(\x0e2\x10.pbuf.DeviceTypeR\x04type\x12!\n" +
	"\x05color\x18\x04 \x01(\v2\v.pbuf.ColorR\x05color\"\x86\x01\n" +
	"\x0ePairingSession\x12.\n" +
	"\tinitiator\x18\x01 \x01(\v2\x10.pbuf.DeviceInfoR\tinitiator\x12.\n" +
	"\tresponder\x18\x02 \x01(\v2\x10.pbuf.DeviceInfoR\tresponder\x12\x14\n" +
	"\x05token\x18\x03 \x01(\fR\x05token\"F\n" +
	"\fPairedDevice\x12 \n" +
	"\vcertificate\x18\x01 \x01(\fR\vcertificate\x12\x14\n" +
	"\x05token\x18\x02 \x01(\fR\x05token\"I\n" +
	"\vPairRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12$\n" +
	"\x04info\x18\x02 \x01(\v2\x10.pbuf.DeviceInfoR\x04info\"J\n" +
	"\fPairResponse\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12$\n" +
	"\x04info\x18\x02 \x01(\v2\x10.pbuf.DeviceInfoR\x04info*:\n" +
	"\n" +
	"DeviceType\x12\n" +
	"\n" +
	"\x06Mobile\x10\x00\x12\v\n" +
	"\aDesktop\x10\x01\x12\x06\n" +
	"\x02TV\x10\x02\x12\v\n" +
	"\aUnknown\x10\x032?\n" +
	"\aPairing\x124\n" +
	"\vRequestPair\x12\x11.pbuf.PairRequest\x1a\x12.pbuf.PairResponseB\x0fZ\ralat/pkg/pbufb\x06proto3"

var (
	file_pair_proto_rawDescOnce sync.Once
	file_pair_proto_rawDescData []byte
)

func file_pair_proto_rawDescGZIP() []byte {
	file_pair_proto_rawDescOnce.Do(func() {
		file_pair_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pair_proto_rawDesc), len(file_pair_proto_rawDesc)))
	})
	return file_pair_proto_rawDescData
}

var file_pair_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pair_proto_goTypes = []any{
	(DeviceType)(0),        // 0: pbuf.DeviceType
	(*Color)(nil),          // 1: pbuf.Color
	(*DeviceInfo)(nil),     // 2: pbuf.DeviceInfo
	(*PairingSession)(nil), // 3: pbuf.PairingSession
	(*PairedDevice)(nil),   // 4: pbuf.PairedDevice
	(*PairRequest)(nil),    // 5: pbuf.PairRequest
	(*PairResponse)(nil),   // 6: pbuf.PairResponse
}
var file_pair_proto_depIdxs = []int32{
	0, // 0: pbuf.DeviceInfo.type:type_name -> pbuf.DeviceType
	1, // 1: pbuf.DeviceInfo.color:type_name -> pbuf.Color
	2, // 2: pbuf.PairingSession.initiator:type_name -> pbuf.DeviceInfo
	2, // 3: pbuf.PairingSession.responder:type_name -> pbuf.DeviceInfo
	2, // 4: pbuf.PairRequest.info:type_name -> pbuf.DeviceInfo
	2, // 5: pbuf.PairResponse.info:type_name -> pbuf.DeviceInfo
	5, // 6: pbuf.Pairing.RequestPair:input_type -> pbuf.PairRequest
	6, // 7: pbuf.Pairing.RequestPair:output_type -> pbuf.PairResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pair_proto_init() }
func file_pair_proto_init() {
	if File_pair_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pair_proto_rawDesc), len(file_pair_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pair_proto_goTypes,
		DependencyIndexes: file_pair_proto_depIdxs,
		EnumInfos:         file_pair_proto_enumTypes,
		MessageInfos:      file_pair_proto_msgTypes,
	}.Build()
	File_pair_proto = out.File
	file_pair_proto_goTypes = nil
	file_pair_proto_depIdxs = nil
}
