syntax = "proto3";

package pbuf.v1;

option go_package = "alat/pkg/pbuf";

message Color {
  string name = 1;
}
enum DeviceType {
  DEVICE_TYPE_UNSPECIFIED = 0;
  DEVICE_TYPE_MOBILE = 1;
  DEVICE_TYPE_DESKTOP = 2;
  DEVICE_TYPE_TV = 3;
}
message DeviceInfo {
  string id = 1;
  string name = 2;
  DeviceType type = 3;
  Color color = 4;
}

message DeviceDetails {
  bytes certificate = 1;
  string name = 2;
  DeviceType type = 3;
  Color color = 4;
}

message RequestPairRequest {
  bytes token = 1;
  DeviceDetails details = 2;
}
message RequestPairResponse {
  bytes token = 1;
  bool accepted = 2;
  DeviceDetails details = 3;
  string reason = 4;
}

message GetDetailsRequest {}
message GetDetailsResponse {
  DeviceDetails details = 1;
}

message GetInfoRequest {}
message GetInfoResponse {
  DeviceInfo info = 1;
}

message SysInfo {
  string hostName = 1;
  string os = 2;
  string platform = 3;

  uint64 memTotal = 4;
  uint64 memUsed = 5;

  uint64 diskTotal = 6;
  uint64 diskUsed = 7;

  bool batteryCharging = 8;
  double batteryPercent = 9;

  double cpuUsage = 10;
}

message GetSysInfoRequest {
  bytes token = 1;
}
enum ServiceCallStatus {
 SERVICE_CALL_STATUS_OK = 0; 
 SERVICE_CALL_STATUS_ERROR = 1; 
 SERVICE_CALL_STATUS_UNAUTHORIZED = 2; 
 SERVICE_CALL_STATUS_DISABLED = 3; 
 SERVICE_CALL_STATUS_UNKNOWN = 4; 
}
message GetSysInfoResponse {
  ServiceCallStatus status = 1;
  string msg = 2;
  SysInfo info = 3;
}


service AlatService {
  rpc RequestPair(RequestPairRequest) returns (RequestPairResponse);
  rpc GetDetails(GetDetailsRequest) returns (GetDetailsResponse);
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse);
}

service SysInfoService {
  rpc GetSysInfo(GetSysInfoRequest) returns (GetSysInfoResponse);
}

service FileSendService {
  rpc SendFile(stream SendFileRequest) returns (SendFileResponse);
}

message InitialSendFileRequest {
  bytes token = 1;
  FileMetadata metadata = 2;
  DeviceInfo sender_info = 3;
}

message FileMetadata {
  string name = 1;
  int64 size = 2;
  int32 mode = 3; // File permissions
}

message FileChunk {
  bytes content = 1;
}

message SendFileRequest {
  oneof data {
    InitialSendFileRequest initial_request = 1;
    FileChunk chunk = 2;
  }
}

message SendFileResponse {
  ServiceCallStatus status = 1;
  string msg = 2;
}

