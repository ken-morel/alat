// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pair.proto

package pbuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AlatService_RequestPair_FullMethodName = "/pbuf.v1.AlatService/RequestPair"
	AlatService_GetDetails_FullMethodName  = "/pbuf.v1.AlatService/GetDetails"
	AlatService_GetInfo_FullMethodName     = "/pbuf.v1.AlatService/GetInfo"
)

// AlatServiceClient is the client API for AlatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlatServiceClient interface {
	RequestPair(ctx context.Context, in *RequestPairRequest, opts ...grpc.CallOption) (*RequestPairResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type alatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlatServiceClient(cc grpc.ClientConnInterface) AlatServiceClient {
	return &alatServiceClient{cc}
}

func (c *alatServiceClient) RequestPair(ctx context.Context, in *RequestPairRequest, opts ...grpc.CallOption) (*RequestPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestPairResponse)
	err := c.cc.Invoke(ctx, AlatService_RequestPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alatServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, AlatService_GetDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alatServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, AlatService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlatServiceServer is the server API for AlatService service.
// All implementations must embed UnimplementedAlatServiceServer
// for forward compatibility.
type AlatServiceServer interface {
	RequestPair(context.Context, *RequestPairRequest) (*RequestPairResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	mustEmbedUnimplementedAlatServiceServer()
}

// UnimplementedAlatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlatServiceServer struct{}

func (UnimplementedAlatServiceServer) RequestPair(context.Context, *RequestPairRequest) (*RequestPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPair not implemented")
}
func (UnimplementedAlatServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedAlatServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAlatServiceServer) mustEmbedUnimplementedAlatServiceServer() {}
func (UnimplementedAlatServiceServer) testEmbeddedByValue()                     {}

// UnsafeAlatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlatServiceServer will
// result in compilation errors.
type UnsafeAlatServiceServer interface {
	mustEmbedUnimplementedAlatServiceServer()
}

func RegisterAlatServiceServer(s grpc.ServiceRegistrar, srv AlatServiceServer) {
	// If the following call pancis, it indicates UnimplementedAlatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AlatService_ServiceDesc, srv)
}

func _AlatService_RequestPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlatServiceServer).RequestPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlatService_RequestPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlatServiceServer).RequestPair(ctx, req.(*RequestPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlatService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlatServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlatService_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlatServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlatService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlatServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlatService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlatServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlatService_ServiceDesc is the grpc.ServiceDesc for AlatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbuf.v1.AlatService",
	HandlerType: (*AlatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPair",
			Handler:    _AlatService_RequestPair_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _AlatService_GetDetails_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _AlatService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pair.proto",
}
